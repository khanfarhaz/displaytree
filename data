import React, { useState } from "react";
import "react-sortable-tree/style.css";
import TreeView from "./DragDrop";
import UpdateNodeComponent from "./Add";
import "./styles.css";
import { arrayMove } from "react-sortable-hoc";
import { getNodeKey, removeNodeAtPath } from "react-sortable-tree";

const Tree = (props) => {
  const initialData = [
    {
      title: "Data_1",
      id: 0,
      children: [
        {
          id: 0,
          title: "Data_1-1"
        }
      ]
    },
    {
      id: 1,
      title: "Data_2"
    },
    {
      id: 2,
      title: "Data_3"
    }
  ];
  const [treeData, settreeData] = useState(initialData);
  const [action, setaction] = useState("add");
  const [currentNodeItem, setcurrentNodeItem] = useState("");
  const [currentNodeIndex, setcurrentNodeIndex] = useState();
  const [parentNodeIndex, setparentNodeIndex] = useState();

  const updateTreeData = (data) => {
    settreeData([...data]);
  };

  const EditNode = (event) => {
    if (event.parentNode !== null) {
      const i = treeData.findIndex((a) => a.id === event.parentNode.id);
      const j = treeData[i].children.findIndex((a) => a.id === event.node.id);
      const title = treeData[i].children[j].title;
      setparentNodeIndex(i);
      setcurrentNodeIndex(j);
      setcurrentNodeItem(title);
      setaction("edit");
    } else {
      const i = treeData.findIndex((a) => a.id === event.node.id);
      setcurrentNodeIndex(i);
      setcurrentNodeItem(treeData[i].title);
      setaction("edit");
    }
  };

  const removeNode = (rowInfo) => {
    let { treeIndex, path, node } = rowInfo;
    settreeData(
      removeNodeAtPath({
        treeData: treeData,
        path: path,
        getNodeKey: ({ treeIndex: number, node: TreeNode }) => {
          return number;
        },
        ignoreCollapsed: false
      })
    );
  };

  const updateNode = (data) => {
    if (action === "edit") {
      let tree = treeData;
      if (parentNodeIndex !== undefined) {
        tree[parentNodeIndex].children[currentNodeIndex].title = data;
      } else {
        tree[currentNodeIndex].title = data;
      }
      settreeData([...tree]);
      setaction("add");
      setparentNodeIndex();
    } else {
      settreeData([...treeData, { id: treeData.length, title: data }]);
      setaction("add");
    }
  };

  return (
    <div>
      <div className="add-dt">
        <div className="left-side">
          <UpdateNodeComponent
            value={currentNodeItem}
            updateNode={(data) => updateNode(data)}
            action={action}
          />
        </div>
        <div className="right-side">
          <TreeView
            data={treeData}
            EditNode={EditNode}
            removeNode={removeNode}
            updateTreeData={updateTreeData}
          />
        </div>
      </div>
    </div>
  );
};

export default Tree;
